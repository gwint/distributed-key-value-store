/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef replicaservice_TYPES_H
#define replicaservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class Entry;

class AppendEntryResponse;

class Ballot;

class ID;

class PutResponse;

class GetResponse;

typedef struct _Entry__isset {
  _Entry__isset() : key(false), value(false), term(false), clientIdentifier(false), requestIdentifier(false) {}
  bool key :1;
  bool value :1;
  bool term :1;
  bool clientIdentifier :1;
  bool requestIdentifier :1;
} _Entry__isset;

class Entry : public virtual ::apache::thrift::TBase {
 public:

  Entry(const Entry&);
  Entry& operator=(const Entry&);
  Entry() : key(), value(), term(0), clientIdentifier(), requestIdentifier(0) {
  }

  virtual ~Entry() noexcept;
  std::string key;
  std::string value;
  int32_t term;
  std::string clientIdentifier;
  int32_t requestIdentifier;

  _Entry__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_term(const int32_t val);

  void __set_clientIdentifier(const std::string& val);

  void __set_requestIdentifier(const int32_t val);

  bool operator == (const Entry & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(clientIdentifier == rhs.clientIdentifier))
      return false;
    if (!(requestIdentifier == rhs.requestIdentifier))
      return false;
    return true;
  }
  bool operator != (const Entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Entry &a, Entry &b);

std::ostream& operator<<(std::ostream& out, const Entry& obj);

typedef struct _AppendEntryResponse__isset {
  _AppendEntryResponse__isset() : success(false), term(false), prevLogIndex(false), numberOfEntriesAdded(false) {}
  bool success :1;
  bool term :1;
  bool prevLogIndex :1;
  bool numberOfEntriesAdded :1;
} _AppendEntryResponse__isset;

class AppendEntryResponse : public virtual ::apache::thrift::TBase {
 public:

  AppendEntryResponse(const AppendEntryResponse&);
  AppendEntryResponse& operator=(const AppendEntryResponse&);
  AppendEntryResponse() : success(0), term(0), prevLogIndex(0), numberOfEntriesAdded(0) {
  }

  virtual ~AppendEntryResponse() noexcept;
  bool success;
  int32_t term;
  int32_t prevLogIndex;
  int32_t numberOfEntriesAdded;

  _AppendEntryResponse__isset __isset;

  void __set_success(const bool val);

  void __set_term(const int32_t val);

  void __set_prevLogIndex(const int32_t val);

  void __set_numberOfEntriesAdded(const int32_t val);

  bool operator == (const AppendEntryResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(prevLogIndex == rhs.prevLogIndex))
      return false;
    if (!(numberOfEntriesAdded == rhs.numberOfEntriesAdded))
      return false;
    return true;
  }
  bool operator != (const AppendEntryResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendEntryResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendEntryResponse &a, AppendEntryResponse &b);

std::ostream& operator<<(std::ostream& out, const AppendEntryResponse& obj);

typedef struct _Ballot__isset {
  _Ballot__isset() : voteGranted(false), term(false) {}
  bool voteGranted :1;
  bool term :1;
} _Ballot__isset;

class Ballot : public virtual ::apache::thrift::TBase {
 public:

  Ballot(const Ballot&);
  Ballot& operator=(const Ballot&);
  Ballot() : voteGranted(0), term(0) {
  }

  virtual ~Ballot() noexcept;
  bool voteGranted;
  int32_t term;

  _Ballot__isset __isset;

  void __set_voteGranted(const bool val);

  void __set_term(const int32_t val);

  bool operator == (const Ballot & rhs) const
  {
    if (!(voteGranted == rhs.voteGranted))
      return false;
    if (!(term == rhs.term))
      return false;
    return true;
  }
  bool operator != (const Ballot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ballot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ballot &a, Ballot &b);

std::ostream& operator<<(std::ostream& out, const Ballot& obj);

typedef struct _ID__isset {
  _ID__isset() : hostname(false), port(false) {}
  bool hostname :1;
  bool port :1;
} _ID__isset;

class ID : public virtual ::apache::thrift::TBase {
 public:

  ID(const ID&);
  ID& operator=(const ID&);
  ID() : hostname(), port(0) {
  }

  virtual ~ID() noexcept;
  std::string hostname;
  int32_t port;

  _ID__isset __isset;

  void __set_hostname(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const ID & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ID &a, ID &b);

std::ostream& operator<<(std::ostream& out, const ID& obj);

typedef struct _PutResponse__isset {
  _PutResponse__isset() : success(false), leaderID(false) {}
  bool success :1;
  bool leaderID :1;
} _PutResponse__isset;

class PutResponse : public virtual ::apache::thrift::TBase {
 public:

  PutResponse(const PutResponse&);
  PutResponse& operator=(const PutResponse&);
  PutResponse() : success(0) {
  }

  virtual ~PutResponse() noexcept;
  int32_t success;
  ID leaderID;

  _PutResponse__isset __isset;

  void __set_success(const int32_t val);

  void __set_leaderID(const ID& val);

  bool operator == (const PutResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(leaderID == rhs.leaderID))
      return false;
    return true;
  }
  bool operator != (const PutResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutResponse &a, PutResponse &b);

std::ostream& operator<<(std::ostream& out, const PutResponse& obj);

typedef struct _GetResponse__isset {
  _GetResponse__isset() : success(false), value(false), leaderID(false) {}
  bool success :1;
  bool value :1;
  bool leaderID :1;
} _GetResponse__isset;

class GetResponse : public virtual ::apache::thrift::TBase {
 public:

  GetResponse(const GetResponse&);
  GetResponse& operator=(const GetResponse&);
  GetResponse() : success(0), value() {
  }

  virtual ~GetResponse() noexcept;
  bool success;
  std::string value;
  ID leaderID;

  _GetResponse__isset __isset;

  void __set_success(const bool val);

  void __set_value(const std::string& val);

  void __set_leaderID(const ID& val);

  bool operator == (const GetResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(leaderID == rhs.leaderID))
      return false;
    return true;
  }
  bool operator != (const GetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetResponse &a, GetResponse &b);

std::ostream& operator<<(std::ostream& out, const GetResponse& obj);



#endif
