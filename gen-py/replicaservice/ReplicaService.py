#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def request_vote(self, term, candidate_id, last_log_index, last_log_term):
        """
        Parameters:
         - term
         - candidate_id
         - last_log_index
         - last_log_term

        """
        pass

    def append_entry(self, term, leader_id, prev_log_index, prev_log_term, entry, leader_commit):
        """
        Parameters:
         - term
         - leader_id
         - prev_log_index
         - prev_log_term
         - entry
         - leader_commit

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def request_vote(self, term, candidate_id, last_log_index, last_log_term):
        """
        Parameters:
         - term
         - candidate_id
         - last_log_index
         - last_log_term

        """
        self.send_request_vote(term, candidate_id, last_log_index, last_log_term)
        return self.recv_request_vote()

    def send_request_vote(self, term, candidate_id, last_log_index, last_log_term):
        self._oprot.writeMessageBegin('request_vote', TMessageType.CALL, self._seqid)
        args = request_vote_args()
        args.term = term
        args.candidate_id = candidate_id
        args.last_log_index = last_log_index
        args.last_log_term = last_log_term
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_request_vote(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = request_vote_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "request_vote failed: unknown result")

    def append_entry(self, term, leader_id, prev_log_index, prev_log_term, entry, leader_commit):
        """
        Parameters:
         - term
         - leader_id
         - prev_log_index
         - prev_log_term
         - entry
         - leader_commit

        """
        self.send_append_entry(term, leader_id, prev_log_index, prev_log_term, entry, leader_commit)
        return self.recv_append_entry()

    def send_append_entry(self, term, leader_id, prev_log_index, prev_log_term, entry, leader_commit):
        self._oprot.writeMessageBegin('append_entry', TMessageType.CALL, self._seqid)
        args = append_entry_args()
        args.term = term
        args.leader_id = leader_id
        args.prev_log_index = prev_log_index
        args.prev_log_term = prev_log_term
        args.entry = entry
        args.leader_commit = leader_commit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_append_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = append_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "append_entry failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["request_vote"] = Processor.process_request_vote
        self._processMap["append_entry"] = Processor.process_append_entry

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_request_vote(self, seqid, iprot, oprot):
        args = request_vote_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = request_vote_result()
        try:
            result.success = self._handler.request_vote(args.term, args.candidate_id, args.last_log_index, args.last_log_term)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("request_vote", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_append_entry(self, seqid, iprot, oprot):
        args = append_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = append_entry_result()
        try:
            result.success = self._handler.append_entry(args.term, args.leader_id, args.prev_log_index, args.prev_log_term, args.entry, args.leader_commit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("append_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class request_vote_args(object):
    """
    Attributes:
     - term
     - candidate_id
     - last_log_index
     - last_log_term

    """


    def __init__(self, term=None, candidate_id=None, last_log_index=None, last_log_term=None,):
        self.term = term
        self.candidate_id = candidate_id
        self.last_log_index = last_log_index
        self.last_log_term = last_log_term

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.candidate_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.last_log_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.last_log_term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('request_vote_args')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 1)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        if self.candidate_id is not None:
            oprot.writeFieldBegin('candidate_id', TType.I32, 2)
            oprot.writeI32(self.candidate_id)
            oprot.writeFieldEnd()
        if self.last_log_index is not None:
            oprot.writeFieldBegin('last_log_index', TType.I32, 3)
            oprot.writeI32(self.last_log_index)
            oprot.writeFieldEnd()
        if self.last_log_term is not None:
            oprot.writeFieldBegin('last_log_term', TType.I32, 4)
            oprot.writeI32(self.last_log_term)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(request_vote_args)
request_vote_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'term', None, None, ),  # 1
    (2, TType.I32, 'candidate_id', None, None, ),  # 2
    (3, TType.I32, 'last_log_index', None, None, ),  # 3
    (4, TType.I32, 'last_log_term', None, None, ),  # 4
)


class request_vote_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Ballot()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('request_vote_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(request_vote_result)
request_vote_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Ballot, None], None, ),  # 0
)


class append_entry_args(object):
    """
    Attributes:
     - term
     - leader_id
     - prev_log_index
     - prev_log_term
     - entry
     - leader_commit

    """


    def __init__(self, term=None, leader_id=None, prev_log_index=None, prev_log_term=None, entry=None, leader_commit=None,):
        self.term = term
        self.leader_id = leader_id
        self.prev_log_index = prev_log_index
        self.prev_log_term = prev_log_term
        self.entry = entry
        self.leader_commit = leader_commit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.leader_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.prev_log_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.prev_log_term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.entry = Entry()
                    self.entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.leader_commit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('append_entry_args')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 1)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        if self.leader_id is not None:
            oprot.writeFieldBegin('leader_id', TType.I32, 2)
            oprot.writeI32(self.leader_id)
            oprot.writeFieldEnd()
        if self.prev_log_index is not None:
            oprot.writeFieldBegin('prev_log_index', TType.I32, 3)
            oprot.writeI32(self.prev_log_index)
            oprot.writeFieldEnd()
        if self.prev_log_term is not None:
            oprot.writeFieldBegin('prev_log_term', TType.I32, 4)
            oprot.writeI32(self.prev_log_term)
            oprot.writeFieldEnd()
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.STRUCT, 5)
            self.entry.write(oprot)
            oprot.writeFieldEnd()
        if self.leader_commit is not None:
            oprot.writeFieldBegin('leader_commit', TType.I32, 6)
            oprot.writeI32(self.leader_commit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(append_entry_args)
append_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'term', None, None, ),  # 1
    (2, TType.I32, 'leader_id', None, None, ),  # 2
    (3, TType.I32, 'prev_log_index', None, None, ),  # 3
    (4, TType.I32, 'prev_log_term', None, None, ),  # 4
    (5, TType.STRUCT, 'entry', [Entry, None], None, ),  # 5
    (6, TType.I32, 'leader_commit', None, None, ),  # 6
)


class append_entry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('append_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(append_entry_result)
append_entry_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Response, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

