#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def requestVote(self, term, candidateID, lastLogIndex, lastLogTerm):
        """
        Parameters:
         - term
         - candidateID
         - lastLogIndex
         - lastLogTerm

        """
        pass

    def appendEntry(self, term, leaderID, prevLogIndex, prevLogTerm, entry, leaderCommit):
        """
        Parameters:
         - term
         - leaderID
         - prevLogIndex
         - prevLogTerm
         - entry
         - leaderCommit

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def requestVote(self, term, candidateID, lastLogIndex, lastLogTerm):
        """
        Parameters:
         - term
         - candidateID
         - lastLogIndex
         - lastLogTerm

        """
        self.send_requestVote(term, candidateID, lastLogIndex, lastLogTerm)
        return self.recv_requestVote()

    def send_requestVote(self, term, candidateID, lastLogIndex, lastLogTerm):
        self._oprot.writeMessageBegin('requestVote', TMessageType.CALL, self._seqid)
        args = requestVote_args()
        args.term = term
        args.candidateID = candidateID
        args.lastLogIndex = lastLogIndex
        args.lastLogTerm = lastLogTerm
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_requestVote(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = requestVote_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "requestVote failed: unknown result")

    def appendEntry(self, term, leaderID, prevLogIndex, prevLogTerm, entry, leaderCommit):
        """
        Parameters:
         - term
         - leaderID
         - prevLogIndex
         - prevLogTerm
         - entry
         - leaderCommit

        """
        self.send_appendEntry(term, leaderID, prevLogIndex, prevLogTerm, entry, leaderCommit)
        return self.recv_appendEntry()

    def send_appendEntry(self, term, leaderID, prevLogIndex, prevLogTerm, entry, leaderCommit):
        self._oprot.writeMessageBegin('appendEntry', TMessageType.CALL, self._seqid)
        args = appendEntry_args()
        args.term = term
        args.leaderID = leaderID
        args.prevLogIndex = prevLogIndex
        args.prevLogTerm = prevLogTerm
        args.entry = entry
        args.leaderCommit = leaderCommit
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_appendEntry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = appendEntry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "appendEntry failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["requestVote"] = Processor.process_requestVote
        self._processMap["appendEntry"] = Processor.process_appendEntry

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_requestVote(self, seqid, iprot, oprot):
        args = requestVote_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = requestVote_result()
        try:
            result.success = self._handler.requestVote(args.term, args.candidateID, args.lastLogIndex, args.lastLogTerm)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("requestVote", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_appendEntry(self, seqid, iprot, oprot):
        args = appendEntry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = appendEntry_result()
        try:
            result.success = self._handler.appendEntry(args.term, args.leaderID, args.prevLogIndex, args.prevLogTerm, args.entry, args.leaderCommit)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("appendEntry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class requestVote_args(object):
    """
    Attributes:
     - term
     - candidateID
     - lastLogIndex
     - lastLogTerm

    """


    def __init__(self, term=None, candidateID=None, lastLogIndex=None, lastLogTerm=None,):
        self.term = term
        self.candidateID = candidateID
        self.lastLogIndex = lastLogIndex
        self.lastLogTerm = lastLogTerm

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.candidateID = ID()
                    self.candidateID.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lastLogIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.lastLogTerm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('requestVote_args')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 1)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        if self.candidateID is not None:
            oprot.writeFieldBegin('candidateID', TType.STRUCT, 2)
            self.candidateID.write(oprot)
            oprot.writeFieldEnd()
        if self.lastLogIndex is not None:
            oprot.writeFieldBegin('lastLogIndex', TType.I32, 3)
            oprot.writeI32(self.lastLogIndex)
            oprot.writeFieldEnd()
        if self.lastLogTerm is not None:
            oprot.writeFieldBegin('lastLogTerm', TType.I32, 4)
            oprot.writeI32(self.lastLogTerm)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(requestVote_args)
requestVote_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'term', None, None, ),  # 1
    (2, TType.STRUCT, 'candidateID', [ID, None], None, ),  # 2
    (3, TType.I32, 'lastLogIndex', None, None, ),  # 3
    (4, TType.I32, 'lastLogTerm', None, None, ),  # 4
)


class requestVote_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Ballot()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('requestVote_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(requestVote_result)
requestVote_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Ballot, None], None, ),  # 0
)


class appendEntry_args(object):
    """
    Attributes:
     - term
     - leaderID
     - prevLogIndex
     - prevLogTerm
     - entry
     - leaderCommit

    """


    def __init__(self, term=None, leaderID=None, prevLogIndex=None, prevLogTerm=None, entry=None, leaderCommit=None,):
        self.term = term
        self.leaderID = leaderID
        self.prevLogIndex = prevLogIndex
        self.prevLogTerm = prevLogTerm
        self.entry = entry
        self.leaderCommit = leaderCommit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.leaderID = ID()
                    self.leaderID.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.prevLogIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.prevLogTerm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.entry = Entry()
                    self.entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.leaderCommit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('appendEntry_args')
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 1)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        if self.leaderID is not None:
            oprot.writeFieldBegin('leaderID', TType.STRUCT, 2)
            self.leaderID.write(oprot)
            oprot.writeFieldEnd()
        if self.prevLogIndex is not None:
            oprot.writeFieldBegin('prevLogIndex', TType.I32, 3)
            oprot.writeI32(self.prevLogIndex)
            oprot.writeFieldEnd()
        if self.prevLogTerm is not None:
            oprot.writeFieldBegin('prevLogTerm', TType.I32, 4)
            oprot.writeI32(self.prevLogTerm)
            oprot.writeFieldEnd()
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.STRUCT, 5)
            self.entry.write(oprot)
            oprot.writeFieldEnd()
        if self.leaderCommit is not None:
            oprot.writeFieldBegin('leaderCommit', TType.I32, 6)
            oprot.writeI32(self.leaderCommit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(appendEntry_args)
appendEntry_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'term', None, None, ),  # 1
    (2, TType.STRUCT, 'leaderID', [ID, None], None, ),  # 2
    (3, TType.I32, 'prevLogIndex', None, None, ),  # 3
    (4, TType.I32, 'prevLogTerm', None, None, ),  # 4
    (5, TType.STRUCT, 'entry', [Entry, None], None, ),  # 5
    (6, TType.I32, 'leaderCommit', None, None, ),  # 6
)


class appendEntry_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('appendEntry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(appendEntry_result)
appendEntry_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Response, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

