#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Entry(object):
    """

    bool        Boolean, one byte
    i8 (byte)   Signed 8-bit integer
    i16         Signed 16-bit integer
    i32         Signed 32-bit integer
    i64         Signed 64-bit integer
    double      64-bit floating point value
    string      String
    binary      Blob (byte array)
    map<t1,t2>  Map from one type to another
    list<t1>    Ordered list of one type
    set<t1>     Set of unique elements of one type


    Attributes:
     - key
     - value
     - term

    """


    def __init__(self, key=None, value=None, term=None,):
        self.key = key
        self.value = value
        self.term = term

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.key = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Entry')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.I32, 1)
            oprot.writeI32(self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 2)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 3)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - status
     - term
     - prev_log_index
     - number_of_entries_added

    """


    def __init__(self, status=None, term=None, prev_log_index=None, number_of_entries_added=None,):
        self.status = status
        self.term = term
        self.prev_log_index = prev_log_index
        self.number_of_entries_added = number_of_entries_added

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.prev_log_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.number_of_entries_added = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 1)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 2)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        if self.prev_log_index is not None:
            oprot.writeFieldBegin('prev_log_index', TType.I32, 3)
            oprot.writeI32(self.prev_log_index)
            oprot.writeFieldEnd()
        if self.number_of_entries_added is not None:
            oprot.writeFieldBegin('number_of_entries_added', TType.I32, 4)
            oprot.writeI32(self.number_of_entries_added)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Ballot(object):
    """
    Attributes:
     - status
     - term

    """


    def __init__(self, status=None, term=None,):
        self.status = status
        self.term = term

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ballot')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.BOOL, 1)
            oprot.writeBool(self.status)
            oprot.writeFieldEnd()
        if self.term is not None:
            oprot.writeFieldBegin('term', TType.I32, 2)
            oprot.writeI32(self.term)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Entry)
Entry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'key', None, None, ),  # 1
    (2, TType.I32, 'value', None, None, ),  # 2
    (3, TType.I32, 'term', None, None, ),  # 3
)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'status', None, None, ),  # 1
    (2, TType.I32, 'term', None, None, ),  # 2
    (3, TType.I32, 'prev_log_index', None, None, ),  # 3
    (4, TType.I32, 'number_of_entries_added', None, None, ),  # 4
)
all_structs.append(Ballot)
Ballot.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'status', None, None, ),  # 1
    (2, TType.I32, 'term', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
