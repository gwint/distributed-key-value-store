#!/usr/bin/python3

import argparse
from sys import argv, exit, path
from os import getenv, path as ospath
from random import randrange, seed
import logging
from socket import gethostname, gethostbyname, timeout
from time import sleep
import traceback

path.append('gen-py')

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer
from dotenv import load_dotenv

REQUEST_IDENTIFIER_ENV_VAR_NAME = "REQUEST_ID_FILE"
MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME = "CURRENT_LEADER_INFO_FILE"
RPC_TIMEOUT_ENV_VAR_NAME = "CMD_LINE_TOOL_TIMEOUT_MS"
NUM_REQUEST_RETRIES_ENV_VAR_NAME = "CMD_LINE_TOTAL_NUM_RETRIES_PER_REQUEST"
REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME = "CMD_LINE_TOOL_REST_PERIOD_BETWEEN_CALLS_MS"
NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME = "CMD_LINE_TOOL_NUM_REQUEST_RETRY_CYCLES_BEFORE_QUITTING"
CLUSTER_MEMBERSHIP_FILE_NAME_ENV_VAR_NAME = "CLUSTER_MEMBERSHIP_FILE"

from replicaservice import ReplicaService, ttypes

logger = logging.getLogger(f'{argv[0]}_logger')
handler = logging.FileHandler(f'{argv[0]}.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

class PutFailureException(Exception):
    pass

class GetFailureException(Exception):
    pass

class DelFailureException(Exception):
    pass

class ConfigurationInstallationException(Exception):
    pass

class NoTargetFoundException(Exception):
    pass

class InformationRetrievalFailureException(Exception):
    pass

ttypes.ID.__hash__ = lambda self: hash((self.hostname, self.port))

def isNullID(id):
    return (not id.hostname) and id.port == 0

def killReplica(url):
    if ':' not in url or list(url).count(':') != 1:
        print(f'Cannot kill replica at {url}: Invalid format (should be <host>:<port>)')
        exit(1)

    host, portStr = tuple(url.split(':'))
    port = int(portStr)

    transport = TSocket.TSocket(host, port)
    transport = TTransport.TBufferedTransport(transport)

    try:
        transport.open()

        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        client = ReplicaService.Client(protocol)

        try:
            client.kill()

        except TTransport.TTransportException as e:
            logger.debug(f'Experienced error while attempting to kill replica at ({host}:{port})')

    except TTransport.TTransportException as e:
        logger.debug(f'Experienced error while setting up connection to attempt to kill replica at ({host}:{port})')

def listClusterMembers(isTableUsed, target=""):
    clusterInfo = {}

    leaderInfo = getLeaderInfo()

    if not leaderInfo:
        try:
            leaderInfo = getRandomReplica()
        except NoTargetFoundException as e:
            if not target:
                raise e

            addNewReplicaToMembershipFile(target)
            leaderInfo = target.split(':')
            leaderInfo[1] = int(leaderInfo[1])
            leaderInfo = tuple(leaderInfo)

    numCyclesBeforeQuitting = int(getenv(NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME))
    numRetriesBeforeChangingRequestID = int(getenv(NUM_REQUEST_RETRIES_ENV_VAR_NAME))
    pauseDurationAfterRetryMS = int(getenv(REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME))

    host, port = leaderInfo

    for cycleNum in range(numCyclesBeforeQuitting):
        logger.debug(f'Now entering cycle {cycleNum} for MEMBERS request')
        for retryNum in range(numRetriesBeforeChangingRequestID):
            transport = TSocket.TSocket(host, port)
            transport.setTimeout(int(getenv(RPC_TIMEOUT_ENV_VAR_NAME)))
            transport = TTransport.TBufferedTransport(transport)

            try:
                transport.open()
                protocol = TBinaryProtocol.TBinaryProtocol(transport)
                client = ReplicaService.Client(protocol)

                logger.debug(f'Now contacting ({host}:{port}) to resolve MEMBERS')

                try:
                    informationResponse = client.getInformation()

                    if informationResponse.success:
                        logger.debug(f'MEMBERS request successfully resolved')
                        open(getenv(MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME), 'w').write(f'{host}:{port}')

                        displayClusterInfoInTable(informationResponse.clusterInformation) if isTableUsed else displayClusterInfoWithCommaSep(informationResponse.clusterInformation)

                        return

                    elif isNullID(informationResponse.leaderID):
                        logger.debug(f'MEMBERS request unsuccessful and current leader is unknown')
                        host, port = getRandomReplica()
                    else:
                        logger.debug(f'MEMBERS request unsuccessful')
                        host = informationResponse.leaderID.hostname
                        port = informationResponse.leaderID.port

                except TTransport.TTransportException as e:
                    if isinstance(e.inner, timeout):
                        logger.debug(f'Experienced timeout error while contacting ({host}:{port})')

            except TTransport.TTransportException as e:
                logger.debug(f'Experienced transport error while contacting ({host}:{port}): {str(e)}')
                host, port = getRandomReplica()

            sleep((pauseDurationAfterRetryMS / 1000) * 2)

    raise InformationRetrievalFailureException()

def displayClusterInfoInTable(clusterInfo):
    print("+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+")
    print(f'|{"Endpoint".center(23)}|{"Role".center(23)}|{"Term".center(23)}|{"Index".center(23)}|')
    print("+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+")

    for endpoint, replicaInformation in clusterInfo.items():
        endpointStr = f'http://{endpoint.hostname}:{endpoint.port}'.center(23)

        if replicaInformation:
            print(f'|{endpointStr}|{replicaInformation["role"].center(23)}|{replicaInformation["term"].center(23)}|{replicaInformation["index"].center(23)}|')
        else:
            print(f'|{endpointStr}|{"N/A".center(23)}|{"N/A".center(23)}|{"N/A".center(23)}|')

    print("+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+" + ("-" * 23) + "+")

def displayClusterInfoWithCommaSep(clusterInfo):
    count = 0
    for endpoint, replicaInformation in clusterInfo.items():
        if replicaInformation:
            print(f'{endpoint[0]},{endpoint[1]},{replicaInformation["role"]},{replicaInformation["term"]},{replicaInformation["index"]}', end='')
        else:
            print(f'{endpoint[0]},{endpoint[1]},None', end='')

        if count < len(clusterInfo)-1:
            print(';', end='')

        count += 1

    print()

def delKey(key, target=""):
    nextRequestIdentifier = getNextRequestIdentifier()
    hostIP = gethostbyname(gethostname())

    return delKeyHelper(key, hostIP, nextRequestIdentifier, target)

def delKeyHelper(key, clientIdentifier, requestNumber, target):
    leaderInfo = getLeaderInfo()

    if not leaderInfo:
        try:
            leaderInfo = getRandomReplica()
        except NoTargetFoundException as e:
            if not target:
                raise e

            addNewReplicaToMembershipFile(target)
            leaderInfo = target.split(':')
            leaderInfo[1] = int(leaderInfo[1])
            leaderInfo = tuple(leaderInfo)

    numCyclesBeforeQuitting = int(getenv(NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME))
    numRetriesBeforeChangingRequestID = int(getenv(NUM_REQUEST_RETRIES_ENV_VAR_NAME))
    pauseDurationAfterRetryMS = int(getenv(REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME))

    currentRequestNumber = requestNumber
    host, port = leaderInfo

    for cycleNum in range(numCyclesBeforeQuitting):
        logger.debug(f'Now entering cycle {cycleNum} for DEL request')
        for retryNum in range(numRetriesBeforeChangingRequestID):
            logger.debug(f'Request Identifier {currentRequestNumber} being used for DEL attempt {retryNum}')
            transport = TSocket.TSocket(host, port)
            transport.setTimeout(int(getenv(RPC_TIMEOUT_ENV_VAR_NAME)))
            transport = TTransport.TBufferedTransport(transport)

            try:
                transport.open()
                protocol = TBinaryProtocol.TBinaryProtocol(transport)
                client = ReplicaService.Client(protocol)

                logger.debug(f'Now contacting ({host}:{port}) to resolve DEL')

                try:
                    response = client.deletekey(str(key), clientIdentifier, currentRequestNumber)

                    if response.success:
                        logger.debug(f'DEL request successfully resolved')
                        open(getenv(MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME), 'w').write(f'{host}:{port}')
                        setNextRequestIdentifier(currentRequestNumber + 1)

                        return True

                    elif isNullID(response.leaderID):
                        logger.debug(f'DEL request unsuccessful and current leader is unknown')
                        host, port = getRandomReplica()
                    else:
                        logger.debug(f'DEL request unsuccessful')
                        host = response.leaderID.hostname
                        port = response.leaderID.port

                except TTransport.TTransportException as e:
                    if isinstance(e.inner, timeout):
                        logger.debug(f'Experienced timeout error while contacting ({host}:{port})')

            except TTransport.TTransportException as e:
                logger.debug(f'Experienced transport error while contacting ({host}:{port}): {str(e)}')
                host, port = getRandomReplica()

            sleep((pauseDurationAfterRetryMS / 1000) * 2)

        currentRequestNumber += 1

    raise DelFailureException()

def get(key, numPastMappings, target=""):
    nextRequestIdentifier = getNextRequestIdentifier()
    hostIP = gethostbyname(gethostname())

    return getHelper(key, hostIP, nextRequestIdentifier, numPastMappings, target)

def getHelper(key, clientIdentifier, requestNumber, numPastMappings, target):
    leaderInfo = getLeaderInfo()
    if not leaderInfo:
        try:
            leaderInfo = getRandomReplica()
        except NoTargetFoundException as e:
            if not target:
                raise e

            addNewReplicaToMembershipFile(target)
            leaderInfo = target.split(':')
            leaderInfo[1] = int(leaderInfo[1])
            leaderInfo = tuple(leaderInfo)

    numCyclesBeforeQuitting = int(getenv(NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME))
    numRetriesBeforeChangingRequestID = int(getenv(NUM_REQUEST_RETRIES_ENV_VAR_NAME))
    pauseDurationAfterRetryMS = int(getenv(REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME))

    currentRequestNumber = requestNumber
    host, port = leaderInfo

    for cycleNum in range(numCyclesBeforeQuitting):
        for retryNum in range(numRetriesBeforeChangingRequestID):
            transport = TSocket.TSocket(host, port)
            transport.setTimeout(int(getenv(RPC_TIMEOUT_ENV_VAR_NAME)))
            transport = TTransport.TBufferedTransport(transport)

            try:
                transport.open()
                try:
                    protocol = TBinaryProtocol.TBinaryProtocol(transport)
                    client = ReplicaService.Client(protocol)

                    logger.debug(f'Now contacting ({host}:{port}) to resolve GET')

                    response = client.get(str(key), clientIdentifier, currentRequestNumber, numPastMappings)

                    if response.success:
                        logger.debug(f'GET request successfully resolved: {response.values} is the value retreived')
                        open(getenv(MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME), 'w').write(f'{host}:{port}')
                        setNextRequestIdentifier(currentRequestNumber + 1)

                        return response.values

                    elif isNullID(response.leaderID):
                        logger.debug(f'GET request unsuccessful and current leader is unknown')
                        host, port = getRandomReplica()
                    else:
                        logger.debug(f'GET request unsuccessful')
                        host = response.leaderID.hostname
                        port = response.leaderID.port

                except TTransport.TTransportException as e:
                    if isinstance(e.inner, timeout):
                        logger.debug(f'Experienced timeout error while contacting ({host}:{port})')

            except TTransport.TTransportException as e:
                logger.debug(f'Experienced error while creating connection to contact ({host}:{port}) to resolve GET')
                host, port = getRandomReplica()

            sleep(pauseDurationAfterRetryMS / 1000)

        currentRequestNumber += 1

    raise GetFailureException()

def put(key, value, target=""):
    nextRequestIdentifier = getNextRequestIdentifier()
    hostIP = gethostbyname(gethostname())

    return putHelper(key, value, hostIP, nextRequestIdentifier, target)

def putHelper(key, value, clientIdentifier, requestNumber, target):
    leaderInfo = getLeaderInfo()
    if not leaderInfo:
        try:
            leaderInfo = getRandomReplica()
        except NoTargetFoundException as e:
            if not target:
                raise e

            addNewReplicaToMembershipFile(target)
            leaderInfo = target.split(':')
            leaderInfo[1] = int(leaderInfo[1])
            leaderInfo = tuple(leaderInfo)

    numCyclesBeforeQuitting = int(getenv(NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME))
    numRetriesBeforeChangingRequestID = int(getenv(NUM_REQUEST_RETRIES_ENV_VAR_NAME))
    pauseDurationAfterRetryMS = int(getenv(REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME))

    currentRequestNumber = requestNumber
    host, port = leaderInfo

    for cycleNum in range(numCyclesBeforeQuitting):
        logger.debug(f'Now entering cycle {cycleNum} for PUT request')
        for retryNum in range(numRetriesBeforeChangingRequestID):
            logger.debug(f'Request Identifier {currentRequestNumber} being used for PUT attempt {retryNum}')
            transport = TSocket.TSocket(host, port)
            transport.setTimeout(int(getenv(RPC_TIMEOUT_ENV_VAR_NAME)))
            transport = TTransport.TBufferedTransport(transport)

            try:
                transport.open()
                protocol = TBinaryProtocol.TBinaryProtocol(transport)
                client = ReplicaService.Client(protocol)

                logger.debug(f'Now contacting ({host}:{port}) to resolve PUT')

                try:
                    response = client.put(str(key), str(value), clientIdentifier, currentRequestNumber)

                    if response.success:
                        logger.debug(f'PUT request successfully resolved: {key} => {value}')
                        open(getenv(MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME), 'w').write(f'{host}:{port}')
                        setNextRequestIdentifier(currentRequestNumber + 1)

                        return True

                    elif isNullID(response.leaderID):
                        logger.debug(f'PUT request unsuccessful and current leader is unknown')
                        host, port = getRandomReplica()
                    else:
                        logger.debug(f'PUT request unsuccessful')
                        host = response.leaderID.hostname
                        port = response.leaderID.port

                        addNewReplicaToMembershipFile(f'{host}:{port}')

                except TTransport.TTransportException as e:
                    if isinstance(e.inner, timeout):
                        logger.debug(f'Experienced timeout error while contacting ({host}:{port})')

            except TTransport.TTransportException as e:
                logger.debug(f'Experienced transport error while contacting ({host}:{port}): {str(e)}')
                host, port = getRandomReplica()

            sleep((pauseDurationAfterRetryMS / 1000) * 2)

        currentRequestNumber += 1

    raise PutFailureException()

def addNewConfiguration(newSocketAddrLst, target=""):
    nextRequestIdentifier = getNextRequestIdentifier()
    hostIP = gethostbyname(gethostname())

    return addNewConfigurationHelper(newSocketAddrLst, hostIP, nextRequestIdentifier, target)

def addNewConfigurationHelper(newSocketAddrLst, clientIdentifier, requestNumber, target):
    leaderInfo = getLeaderInfo()
    if not leaderInfo:
        try:
            leaderInfo = getRandomReplica()
        except NoTargetFoundException as e:
            if not target:
                raise e

            addNewReplicaToMembershipFile(target)
            leaderInfo = target.split(':')
            leaderInfo[1] = int(leaderInfo[1])
            leaderInfo = tuple(leaderInfo)

    numCyclesBeforeQuitting = int(getenv(NUM_RETRY_CYCLES_BEFORE_QUITTING_ENV_VAR_NAME))
    numRetriesBeforeChangingRequestID = int(getenv(NUM_REQUEST_RETRIES_ENV_VAR_NAME))
    pauseDurationAfterRetryMS = int(getenv(REST_PERIOD_BETWEEN_CALLS_ENV_VAR_NAME))

    currentRequestNumber = requestNumber
    host, port = leaderInfo

    for cycleNum in range(numCyclesBeforeQuitting):
        logger.debug(f'Now entering cycle {cycleNum} for NEWCONFIG request')
        for retryNum in range(numRetriesBeforeChangingRequestID):
            logger.debug(f'Request Identifier {currentRequestNumber} being used for NEWCONFIG attempt {retryNum}')
            transport = TSocket.TSocket(host, port)
            transport.setTimeout(int(getenv(RPC_TIMEOUT_ENV_VAR_NAME)))
            transport = TTransport.TBufferedTransport(transport)

            try:
                transport.open()
                protocol = TBinaryProtocol.TBinaryProtocol(transport)
                client = ReplicaService.Client(protocol)

                logger.debug(f'Now contacting ({host}:{port}) to resolve NEWCONFIG')

                try:
                    response = client.addNewConfiguration(newSocketAddrLst, clientIdentifier, currentRequestNumber)

                    if response.success:
                        logger.debug(f'NEWCONFIG request successfully resolved')
                        open(getenv(MOST_RECENT_LEADER_ADDR_ENV_VAR_NAME), 'w').write(f'{host}:{port}')
                        setNextRequestIdentifier(currentRequestNumber + 1)

                        return True

                    elif isNullID(response.leaderID):
                        logger.debug(f'NEWCONFIG request unsuccessful and current leader is unknown')
                        host, port = getRandomReplica()
                    else:
                        logger.debug(f'NEWCONFIG request unsuccessful')
                        host = response.leaderID.hostname
                        port = response.leaderID.port

                except TTransport.TTransportException as e:
                    if isinstance(e.inner, timeout):
                        logger.debug(f'Experienced timeout error while contacting ({host}:{port})')

            except TTransport.TTransportException as e:
                logger.debug(f'Experienced transport error while contacting ({host}:{port}): {str(e)}')
                host, port = getRandomReplica()

            sleep((pauseDurationAfterRetryMS / 1000) * 2)

        currentRequestNumber += 1

    raise ConfigurationInstallationException()

def getLeaderInfo():
    if ospath.exists(getenv("CURRENT_LEADER_INFO_FILE")):
        leaderInfoFileObj = open(getenv("CURRENT_LEADER_INFO_FILE"), 'r')
        leaderAddr = leaderInfoFileObj.read().strip()
        if not leaderAddr:
            return ()
        if ':' not in leaderAddr or list(leaderAddr).count(':') > 1:
            raise ValueError(f'{getenv("CURRENT_LEADER_INFO_FILE")} containing leader information is ill-formed: should have single line of the form <host>:<port>; {leaderAddr} does not comply.')

        return tuple(leaderAddr.split(':'))

    else:
        leaderInfoFileObj = open(getenv("CURRENT_LEADER_INFO_FILE"), 'w')
        randomHost, randomPort = getRandomReplica()
        leaderInfoFileObj.write(f'{randomHost}:{randomPort}\n')

        return (randomHost, randomPort)

def addNewReplicaToMembershipFile(newSocketAddr):
    currentMembership = set()

    if ospath.exists(getenv("CLUSTER_MEMBERSHIP_FILE")):
        with open(getenv("CLUSTER_MEMBERSHIP_FILE"), 'r') as clusterMembershipFileObj:
            socketAddr = clusterMembershipFileObj.readline()
            while socketAddr:
                currentMembership.add(socketAddr.strip())
                socketAddr = clusterMembershipFileObj.readline()

    currentMembership.add(newSocketAddr)

    with open(getenv("CLUSTER_MEMBERSHIP_FILE"), 'w') as clusterMembershipFileObj:
        for socketAddr in currentMembership:
            clusterMembershipFileObj.write(socketAddr + '\n')

def removeReplicaFromMembershipFile(socketAddrToRemove):
    currentMembership = set()
    with open(getenv("CLUSTER_MEMBERSHIP_FILE"), 'r') as clusterMembershipFileObj:
        socketAddr = clusterMembershipFileObj.readline()
        while socketAddr:
            currentMembership.add(socketAddr)
            socketAddr = clusterMembershipFileObj.readline()

    if socketAddrToRemove not in currentMembership:
        return

    currentMembership.remove(socketAddrToRemove)

    with open(getenv("CLUSTER_MEMBERSHIP_FILE"), 'w') as clusterMembershipFileObj:
        for socketAddr in currentMembership:
            clusterMembershipFileObj.write(socketAddr + '\n')

def getRandomReplica():
    if not ospath.exists("CLUSTER_MEMBERSHIP_FILE"):
        raise NoTargetFoundException()

    seed()

    replicaInfoFileObj = open(getenv("CLUSTER_MEMBERSHIP_FILE"), 'r')

    replicaInfo = []

    line = replicaInfoFileObj.readline()
    while line:
        line = line.strip()
        if not line:
            raise ValueError(f'{getenv("CLUSTER_MEMBERSHIP_FILE")} is ill-formed: each line shoudl be of the form <host>:<port>; {line} does not comply.')
        if ':' not in line or list(line).count(':') > 1:
            raise ValueError(f'{getenv("CLUSTER_MEMBERSHIP_FILE")} is ill-formed: the file must not be empty')

        host, portStr = tuple(line.strip().split(':'))
        port = int(portStr)

        replicaInfo.append((host, port))

        line = replicaInfoFileObj.readline()

    replicaInfoFileObj.close()

    return replicaInfo[randrange(len(replicaInfo))]

def getNextRequestIdentifier():
    if not ospath.exists(getenv(REQUEST_IDENTIFIER_ENV_VAR_NAME)):
        with open(getenv(REQUEST_IDENTIFIER_ENV_VAR_NAME), 'w') as nextIdentifierFileObj:
            nextIdentifierFileObj.write("0")

    nextIdentifierFileObj = open(getenv(REQUEST_IDENTIFIER_ENV_VAR_NAME))
    nextIdentifierStr = nextIdentifierFileObj.read().strip()

    return int(nextIdentifierStr)

def setNextRequestIdentifier(nextIdentifier):
    nextIdentifierFileObj = open(getenv(REQUEST_IDENTIFIER_ENV_VAR_NAME), 'w')
    nextIdentifierStr = str(nextIdentifier)
    nextIdentifierFileObj.write(nextIdentifierStr)

if __name__ == "__main__":
    load_dotenv()

    parser = argparse.ArgumentParser(prog=f'{argv[0]}')
    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    killParser = subparsers.add_parser("kill", help="Used to stop a running replica")
    killParser.add_argument("url", help="<host>:<port>")

    membersParser = subparsers.add_parser("members", help="Used to list state of current cluster members")
    membersParser.add_argument("-table", action="store_true")
    membersParser.add_argument("-target", default="", help="Socket address of the replica to send initial request to")

    putParser = subparsers.add_parser("put", help="Used to create or update a key-value pair")
    putParser.add_argument("key", help="To be used as a key for the mapping")
    putParser.add_argument("value", help="To be used as a value for the mapping")
    putParser.add_argument("-target", default="", help="Socket address of the replica to send initial request to")

    getParser = subparsers.add_parser("get", help="Used to read value associated with a given key")
    getParser.add_argument("key", help="Key whose associated value will be retreived")
    getParser.add_argument("-rev", nargs="?", type=int, default=0)
    getParser.add_argument("-target", default="", help="Socket address of the replica to send initial request to")

    delKeyParser = subparsers.add_parser("del", help="Used to remove a given key from the cluster")
    delKeyParser.add_argument("key", help="Key to be removed from the cluster")
    delKeyParser.add_argument("-target", default="", help="Socket address of the replica to send initial request to")

    newConfigParser = subparsers.add_parser("newconfig", help="Used to change the configuration of the cluster")
    newConfigParser.add_argument("socketaddresses", nargs="+", help="IP address / port number pairs for machines included in the new cluster configuration.  Should have the form <ip addr>:<port number>.")
    newConfigParser.add_argument("-target", default="", help="Socket address of the replica to send initial request to")

    args = parser.parse_args()

    if args.command == "kill":
        killReplica(args.url)
    elif args.command == "members":
        try:
            listClusterMembers(args.table, args.target)
        except InformationRetrievalFailureException:
            print()
        except NoTargetFoundException:
            print("MEMBERS request failed because no target could be found: Please specify -target in the command")
    elif args.command == "put":
        try:
            print(put(args.key, args.value, args.target))
        except PutFailureException:
            print("PUT Request Failed")
        except NoTargetFoundException:
            print("PUT request failed because no target could be found: Please specify -target in the command")
    elif args.command == "get":
        try:
            for val in get(args.key, args.rev, args.target):
                print(val)
        except GetFailureException:
            print("GET Request Failed")
        except NoTargetFoundException:
            print("GET request failed because no target could be found: Please specify -target in the command")
    elif args.command == "del":
        try:
            print(delKey(args.key, args.target))
        except NoTargetFoundException:
            print("DEL request failed because no target could be found: Please specify -target in the command")
    elif args.command == "newconfig":
        try:
            print(addNewConfiguration(args.socketaddresses, args.target))
        except NoTargetFoundException:
            print("NEWCONFIG request failed because no target could be found: Please specify -target in the command")
        except ConfigurationInstallationException:
            print("Configuration Installation Failed")
    else:
        parser.error("No command provided: must be one of (kill, members, put, get)")
